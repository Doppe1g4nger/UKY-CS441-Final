The final project for CS441

December 2017

Submitted by:   --- ADJUST FOR YOUR SUBMISSION (JWJ)

  * Daniel Dopp

  * Atanas Golev 

This submission includes Milestones C and D.

The project converts a C-- program into a pstack executable, which can then be
executed by the pstack machine.

### Synopsis

compile with:
bnfc cpp_stl zp.cf
make
make -f Makefile.codegen

run with:
./compiler2017 input_zp_file output_apm_file
# zp


#### Building

`./zp2pstack <zp file> <apm output file>`

#### Running

`./pstack/api <apm file w/o ext.> [-d]`

#### Testing

`./test-zp2pstack-modified.sh myTESTS`

### Files

  * Makefile.codegen

      * The Makefile for `zp2pstack`

  * zp.cf

      * Grammar of the zp language used by `bnfc`

  * Absyn.C/H

      * Abstract syntax tree files generated by `bnfc`

  * zp.l/y

      * Flex and Bison files generated by bnfc

  * codegen.cc/h

      * Defines the p-code generation class

  * Lexer.C/H

      * Lexer files generated by `bnfc`

  * Parser.C/H

      * Parser files generated by `bnfc`

  * Parser.C/H

      * Printer files generated by `bnfc`

  * pstcode.cc/h

      * Implements prolog functions such as `getnum()`` and other functions

  * Skeleton.C/H

      * Skeleton files generated by `bnfc`

  * symbtable.cc/h

      * Defines the Symbol and SymbolTable classes

  * typescript

      * Script of the tests being run

  * myTests

      * Directory containing the tests

  * pstack

      * Directory containing the pstack supplied by the instructor

### Project status

#### Milestone features   --- ADJUST FOR YOUR SUBMISSION (JWJ)
  * if and if-else: **Complete**

  * for2-loop: **Complete**

  * for3-loop: **Complete**

  * Optimization: **Complete**

  * Globals: **Complete**

  * repeat-until-loop: **Complete**

  * Scoped for-loop: *Complete*

  * Argument count checking: **Complete**

  * Type checking: *Complete*

  * Doubles: *Incomplete*

#### Additional features   --- ADJUST FOR YOUR SUBMISSION (JWJ)

  * Added additional operators: >, >=, <=, !=, ==, &&, ||, !

### Developers' notes   --- ADJUST FOR YOUR SUBMISSION (JWJ)

We were pretty stumped with the implementation of the argument type checking. We took a two-pronged approach of
ensuring that the return type matched the type of the variable that was actually returned (this was implemented in
SReturn) and also ensuring that the parameter types matched. This also meant that we included another global variable
in the symbol table that kept track of the parameter type that was expected. We decided that the easiest place to put 
the argument type check for these parameters was within the listdecl function itself, because that is where we had
easy access to each identifier that the program read. Othewise, there are not many bells and whistles; however, we did
implement all the required functions and they work except extreme edge cases for nested for loops and arg checking 
(see Known Bugs).

### Known bugs   --- ADJUST FOR YOUR SUBMISSION (JWJ)

  * nested scoped for loop:
	scoped for loops do not support nested loops, only while and non-scoped for loops support nested ifs,
	scoped for loops also do not fully shield scoped variable assignments from outside assignments
  * argument checking:
	does not always work for functions within functions if the parameters of the inside function do not match 
	those of the outside function
