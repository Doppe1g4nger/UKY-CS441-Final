The final project for CS441

December 2017

Submitted by:   --- ADJUST FOR YOUR SUBMISSION (JWJ)

  * Daniel Dopp

  * Atanas Golev 

This submission includes Milestones C and D.

The project converts a C-- program into a pstack executable, which can then be
executed by the pstack machine.

### Synopsis

compile with:
bnfc cpp_stl zp.cf
make
make -f Makefile.codegen

run with:
./compiler2017 input_zp_file output_apm_file
# zp


#### Building

`./zp2pstack <zp file> <apm output file>`

#### Running

`./pstack/api <apm file w/o ext.> [-d]`

#### Testing

`./test-zp2pstack-modified.sh myTESTS`

TESTS: please deliver on the expectations listed below

Include in myTests directory: one group of tests for each feature.
For each goal in the project, include two tests: basic and advanced.
Additionally, include test programs that are incorrect zp, to demonstrate how errors are reported.
Add one larger and more realistic zp program.

Note: The tests are run through script included in the handout.
Synopsis for testing zp files in TESTS: test-zp2pstack-modified.sh myTESTS
Note that this script requires additional files for each program: listing the expected results, and possible
messages from the compiler (see TESTS).

### Files

  * Makefile.codegen

      * The Makefile for `zp2pstack`

  * zp.cf

      * Grammar of the zp language used by `bnfc`

  * Absyn.C/H

      * Abstract syntax tree files generated by `bnfc`

  * zp.l/y

      * Flex and Bison files generated by bnfc

  * codegen.cc/h

      * Defines the p-code generation class

  * Lexer.C/H

      * Lexer files generated by `bnfc`

  * Parser.C/H

      * Parser files generated by `bnfc`

  * Parser.C/H

      * Printer files generated by `bnfc`

  * pstcode.cc/h

      * Implements prolog functions such as `getnum()`` and other functions

  * Skeleton.C/H

      * Skeleton files generated by `bnfc`

  * symbtable.cc/h

      * Defines the Symbol and SymbolTable classes

  * typescript

      * Script of the tests being run

  * myTests

      * Directory containing the tests

  * pstack

      * Directory containing the pstack supplied by the instructor

### Project status

#### Milestone features   --- ADJUST FOR YOUR SUBMISSION (JWJ)
  * if and if-else: **Complete**

  * for2-loop: **Complete**

  * for3-loop: **Complete**

  * Optimization: **Complete**

  * Globals: **Complete**

  * repeat-until-loop: **Complete**

  * Scoped for-loop: *In-Progress*

  * Argument count checking: **In-Progress**

  * Type checking: *Incomplete*

  * Doubles: *Incomplete*

#### Additional features   --- ADJUST FOR YOUR SUBMISSION (JWJ)

  * C-style declaration/assignment-on-declaration lists.

      * Example:

      ```c
      int a, b = 5, c, d = 4, e;
      ```

  * Add additional operators: >, >=, <=, !=, ==

	&&, ||, /, %, !

### Developers' notes   --- ADJUST FOR YOUR SUBMISSION (JWJ)

Describe the basic ideas of your implementation for above features, focusing on
interesting solutions, difficulties, important design decisions, etc.

### Known bugs   --- ADJUST FOR YOUR SUBMISSION (JWJ)

  * bug 1
  * bug 2, etc. -- BE SPECIFIC (JWJ)
